{"version":3,"sources":["base/_box-sizing.scss","base/_variables.scss","base/_typography.scss","base/functions/_px-to-em.scss","components/_student-name.scss","components/_main-nav.scss","components/_profile-banner.scss","components/_latest-work.scss","layout/_site.scss","layout/_main-content.scss"],"names":[],"mappings":"AAAA;EACE,uBAAuB,EACxB;;AAED;EACE,oBAAoB,EACrB;;ACND;;mCAEmC;AAsBnC;;mCAEmC;AAWnC;;mCAEmC;ACvCnC;EACE,6EDIiE;ECHjE,iBAAiB;EACjB,eDQmB;ECPnB,mBCkBiB;EDjBjB,2BDqCa;ECpCb,0BDwCa,ECvCd;;AAED;;;;;;;EAOE,UAAU,EACX;;AAED;;;;;;EAME,iBDHwB,ECIzB;;AAED;EACE,mBCPiB;EDQjB,iBAAiB;EACjB,mBAAmB,EACpB;;AAED;EACE,iBCbiB;EDcjB,iBAAiB,EAClB;;AAED;EACE,0BAA0B;EAC1B,mBAAmB;EACnB,eCpBiB,EDqBlB;;AAED;EACE,kBCxBiB;EDyBjB,iBAAiB,EAClB;;AAED;EACE,mBC7BiB;ED8BjB,iBAAiB;EACjB,mBC/BiB,EDgClB;;AAED;EACE,2BDfa;ECgBb,sBAAsB,EACvB;;AE3DD;EACE,kBAA0B,EAC3B;;ACFD;EACE,qBAAc;EAAd,cAAc;EACd,6BAAuB;EAAvB,8BAAuB;UAAvB,uBAAuB;EACvB,YAAY;EACZ,kBJ4BiC,EI3BlC;;AAED;EACE,oBAAQ;UAAR,QAAQ;EACR,iBAAiB;EACjB,0BAA0B;EAC1B,mBAAmB;EACnB,wBJiCS;EIhCT,gBJmBiC;EIlBjC,qBJmBgC,EIlBjC;;ACfD;EACE,qBAAc;EAAd,cAAc;EACd,6BAA+B;EAA/B,+BAA+B;UAA/B,+BAA+B;EAC/B,YAAY;EACZ,oBL4BiC,EKZlC;EApBD;IAOI,mBAAmB;IACnB,WAAW,EAKZ;IAbH;MAWM,YAAY,EACb;EAZL;IAgBI,eLLiB;IKMjB,mBAAmB;IACnB,sBLc+B,EKbhC;;ACnBF;EACE,oBAAQ;UAAR,QAAQ;EACR,qBAAc;EAAd,cAAc;EACd,6BAAuB;EAAvB,8BAAuB;UAAvB,uBAAuB;EACvB,gBAAgB,EAGjB;;ACPF;EACE,qBAAc;EAAd,cAAc;EACd,6BAAuB;EAAvB,8BAAuB;UAAvB,uBAAuB;EACvB,gBAAgB,EACjB;;ACJD;EACE,oBAAQ;UAAR,QAAQ;EACR,qBAAc;EAAd,cAAc;EACd,6BAAuB;EAAvB,8BAAuB;UAAvB,uBAAuB;EACvB,YAAY;EACZ,kBR2BiC;EQ1BjC,wBRuCS,EQtCV","file":"styles.css","sourcesContent":["html {\n  box-sizing: border-box;\n}\n\n*, *::before, *::after {\n  box-sizing: inherit;\n}\n","/**********************************\n Typography\n**********************************/\n\n// Font stacks\n$helvetica: \"Helvetica Neue\", Helvetica, Verdana, Arial, sans-serif;\n$roboto: Roboto, $helvetica;\n$base__font-family: $roboto;\n\n// Font-sizing\n$em-base: 16px;\n$base__font-size: 1em;\n$headline__font-size: em(24);\n$title__font-size: em(20);\n$subheading__font-size: em(16);\n$body__font-size: em(14);\n$caption__font-size: em(12);\n$button__font-size: $body__font-size;\n\n// Line heights\n$base__line-height: em(24, 16);\n$body__line-height: em(20, 14);\n$heading__line-height: 1.2;\n\n/**********************************\n  General Sizing\n**********************************/\n\n// Spacing\n$base__spacing: $base__line-height;\n\n$large__spacing: $base__line-height * 2;\n$small__spacing: $base__line-height / 2;\n$mini__spacing: $base__line-height / 3;\n$micro__spacing: $base__line-height / 4;\n\n\n/**********************************\n  Colors\n**********************************/\n\n// General Colors\n$black-87: rgba(0,0,0,0.87);\n$black-54: rgba(0,0,0,0.54);\n\n$white: rgb(255,255,255);\n$off-white: rgb(250,250,250);\n$light-gray: rgb(237,237,237);\n\n// Font Colors\n$base__font-color: $black-87;\n$base__font-color--disabled: $black-54;\n","body {\n  font-family: $roboto;\n  font-weight: 300;\n  font-size: $base__font-size;\n  line-height: $base__line-height;\n  color: $base__font-color;\n  background-color: $off-white;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np {\n  margin: 0;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  line-height: $heading__line-height;\n}\n\nh1 {\n  font-size: em(34);\n  font-weight: 900;\n  text-align: center;\n}\n\nh2, .subheading {\n  font-size: em(24);\n  font-weight: 700;\n}\n\n.subheading {\n  text-transform: uppercase;\n  text-align: center;\n  padding: $base__spacing;\n}\n\nh3 {\n  font-size: em(20);\n  font-weight: 600;\n}\n\np {\n  font-size: $body__font-size;\n  font-weight: 300;\n  line-height: $base__line-height;\n}\n\na {\n  color: $base__font-color;\n  text-decoration: none;\n}\n","// Convert pixels to ems\n// Formula for calculating relative sizes:\n// ( target / context ) = result;\n// To get the result in ems return the function ( target / context ) * 1em\n\n// Target = pixel value\n// context = the base em value; 1em = 16px !default\n\n// See https://github.com/thoughtbot/bourbon/blob/v4-stable/app/assets/stylesheets/functions/_px-to-em.scss\n// for a great implementation\n\n@function em($target, $context: $em-base) {\n  // Strip the units of the target and context entered\n  // so the function can return an em-based value\n\n  @if not unitless($target) {\n    $target: strip-units($target);\n  }\n\n  @if not unitless($context) {\n    $context: strip-units($context);\n  }\n  @return ( $target / $context ) * 1em;\n}\n",".student-name {\n  padding: $small__spacing 0;\n}\n",".main-nav {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 0 $small__spacing;\n}\n\n.main-nav--item {\n  flex: 1;\n  font-weight: 600;\n  text-transform: uppercase;\n  text-align: center;\n  background-color: $white;\n  padding: $small__spacing;\n  margin-bottom: $mini__spacing;\n}\n",".profile-banner {\n  display: flex;\n  flex-direction: column-reverse;\n  width: 100%;\n  padding: $large__spacing $small__spacing;\n\n  .image-container {\n    align-self: center;\n    width: 75%;\n\n    .profile-image {\n      width: 100%;\n    }\n  }\n\n  .profile-info {\n    font-size: $base__font-size;\n    text-align: center;\n    padding: $base__spacing $small__spacing;\n  }\n}\n"," .latest-work {\n   flex: 1;\n   display: flex;\n   flex-direction: column;\n   flex-wrap: wrap;\n\n   \n }\n",".site {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n}\n",".main-content {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 0 $small__spacing;\n  background-color: $white;\n}\n"],"sourceRoot":"/source/"}